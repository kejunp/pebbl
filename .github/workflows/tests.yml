name: Tests
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Boost
        run: sudo apt-get update && sudo apt-get install -y libboost-all-dev

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Configure (Release)
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build all
        run: cmake --build build --config Release -j

      # âœ… Put real binaries under dist/bin via CMake install rules
      - name: Install to prefix
        run: cmake --install build --config Release --prefix "$PWD/dist"

      - name: Show installed tree
        run: find dist -maxdepth 3 -type f -print

      - name: Upload installed binaries
        uses: actions/upload-artifact@v4
        with:
          name: pebbli-dist
          path: dist/bin/*

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: pebbli-dist
          path: ./dist/bin

      - name: Make downloaded files executable
        run: |
          set -euo pipefail
          if compgen -G "./dist/bin/*" > /dev/null; then
            chmod +x ./dist/bin/* || true
          fi

      - name: Locate binary
        id: bin
        shell: bash
        run: |
          set -euo pipefail
          BIN="$(find ./dist/bin -maxdepth 1 -type f -executable | head -n1)"
          if [ -z "${BIN:-}" ]; then
            echo "Nothing executable in dist/bin"; ls -lR ./dist || true; exit 1
          fi
          echo "path=$BIN" >> "$GITHUB_OUTPUT"
          echo "Using: $BIN"

      - name: Run internal test mode (if supported)
        run: |
          set -e
          "${{ steps.bin.outputs.path }}" --dev test || true

      - name: Normalize and compare outputs
        shell: bash
        run: |
          set -euo pipefail

          # Strip prompts from actual, keep non-empty lines
          sed -E 's/^([>]{1,3})[[:space:]]+//; /^\s*$/d' actual.out > actual.norm
          # Trim expected
          sed -E 's/^[[:space:]]+|[[:space:]]+$//g' expected.out > expected.norm

          # Order-preserving subsequence check
          cat > subseq.awk <<'AWK'
          NR==FNR { exp[++n]=$0; next }
          { gsub(/^[[:space:]]+|[[:space:]]+$/,""); if ($0!="") act[++m]=$0 }
          END {
            i=1; j=1
            while (i<=n && j<=m) {
              if (act[j]==exp[i]) { i++; j++ } else j++
            }
            if (i<=n) { print "Missing expected line:", exp[i] > "/dev/stderr"; exit 1 }
          }
          AWK

          awk -f subseq.awk expected.norm actual.norm
          echo "All REPL checks passed."